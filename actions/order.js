import { Composer } from "grammy";
import { conversations, createConversation } from "@grammyjs/conversations";
import { hydrate } from "@grammyjs/hydrate";
import { registration } from "#bot/conversations/registration.js";
import { calculate } from "#bot/conversations/calculate.js";
import { backKeyboard, backMainMenu } from "#bot/keyboards/general.js";
import {
    confirmOrderMenu,
    getSubTypeKeyboard,
    orderMenuBeforeCreate,
    otherKeyboard,
    selectCategoryKeyboard,
} from "#bot/keyboards/order.js";
import { addUserOrder, cleanCart, getUserOrders, updateUserInfo } from "#bot/api/firebase.api.js";
import { translate } from "#bot/helpers/translate.js";
import limitsConfig from "#bot/config/limits.config.js";
import linksConfig from "#bot/config/links.config.js";
import sessionConfig from "#bot/config/session.config.js";
import { getEmoji } from "#bot/helpers/getEmoji.js";
import getHtmlOrderLink from "#bot/helpers/getHtmlOrderLink.js";
import { backToCart } from "#bot/keyboards/cart.js";
import calculateTotalSum from "#bot/helpers/calculateTotalSum.js";
import { sheetUpdater } from "#bot/api/google-sheet.api.js";

export const order = new Composer();
order.use(hydrate());
order.use(conversations());
order.use(createConversation(registration));
order.use(createConversation(calculate));

order.callbackQuery("order__make", async (ctx) => {
    let orderText = "–ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å ";
    orderText += `<a href="${linksConfig.guide}">–≥–∞–π–¥–æ–º</a> –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–∏ POIZON, –∞ —Ç–∞–∫–∂–µ —Å –ø—Ä–∞–≤–∏–ª–æ–º –Ω–∞—à–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏! üö∏`;

    await ctx.editMessageText(orderText, {
        reply_markup: orderMenuBeforeCreate,
        parse_mode: "HTML",
        link_preview_options: {
            is_disabled: true,
            prefer_small_media: true,
        },
    });
    ctx.answerCallbackQuery();
});

order.callbackQuery(/order__create/, async (ctx) => {
    let mode = ctx.callbackQuery.data.split("__create_")[1] ?? "keep";
    let cart = ctx.session.cart;

    if (cart.length === limitsConfig.cartMaxLength) {
        await ctx.editMessageText(
            "–ö–æ—Ä–∑–∏–Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ –ª–∏—à–Ω–µ–µ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ ",
            {
                reply_markup: backToCart,
            }
        );
        ctx.answerCallbackQuery();
    } else {
        if (mode === "skip") {
            ctx.session.user.isNewbie = false;
            if (ctx.session.user?.fio !== "") {
                updateUserInfo(ctx.from.id, {
                    isNewbie: false,
                });
            }
        }
        if (mode === "calc") {
            ctx.session.temp.calcMode = true;
        }
        if (mode === "another") {
            ctx.session.order = structuredClone(sessionConfig.order);
        }

        await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", {
            reply_markup: selectCategoryKeyboard,
        });
        ctx.answerCallbackQuery();
    }
});

order.callbackQuery(/order__select_/, async (ctx) => {
    let currentType = ctx.callbackQuery.data.split("__select_")[1];
    ctx.session.order.type = currentType;

    await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
        reply_markup: getSubTypeKeyboard(currentType),
    });
    ctx.answerCallbackQuery();
});
//delay was deleted, now it has the button "–î–∞–ª–µ–µ"
order.callbackQuery("order__pick_disclaimer", async (ctx) => {
    let otherDisclaimer = "‚ö†Ô∏è–í–∞–∂–Ω–æ‚ö†Ô∏è\n\n–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–î—Ä—É–≥–æ–µ' ";
    otherDisclaimer += "—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏ \n";
    otherDisclaimer += "—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"

    await ctx.editMessageText(otherDisclaimer, {
        reply_markup: otherKeyboard
    })

})
//delay was deleted, now it has the button "–î–∞–ª–µ–µ"
order.callbackQuery("order__pick_disclaimer", async (ctx) => {
    let otherDisclaimer = "‚ö†Ô∏è–í–∞–∂–Ω–æ‚ö†Ô∏è\n\n–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–î—Ä—É–≥–æ–µ' ";
    otherDisclaimer += "—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏ \n";
    otherDisclaimer += "—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"

    await ctx.editMessageText(otherDisclaimer, {
        reply_markup: otherKeyboard
    })

})

order.callbackQuery(/order__pick_/, async (ctx) => {
    ctx.session.order.subType = ctx.callbackQuery.data.split("__pick_")[1];
    ctx.answerCallbackQuery();
    let chatId = ctx.update.callback_query.message.chat.id
    let messageId = ctx.update.callback_query.message.message_id
    ctx.api.deleteMessage(chatId, messageId)

    if (ctx.session.temp?.calcMode) {
        await ctx.conversation.enter("calculate");
    } else {
        await ctx.conversation.enter("registration");
    }
});

order.callbackQuery("order__price", async (ctx) => {
    await ctx.editMessageText("–° —á–µ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ü–µ–Ω–∞...", {
        reply_markup: backKeyboard,
    });
    ctx.answerCallbackQuery();
});

let totalSum;
order.callbackQuery("order__place", async (ctx) => {
    let cart = ctx.session.cart;
    let user = ctx.session.user;

    let makeOrderText = "";

    makeOrderText += "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑:\n\n";
    let cartItemsText = "";
    let totalDutySum = 0;

    cart.forEach((cartItem, index) => {
        cartItemsText += `#${++index}: ${cartItem.name}\n`;
        cartItemsText += `- –°—Å—ã–ª–∫–∞: ${getHtmlOrderLink(cartItem)}\n`;
        cartItemsText += `- –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${cartItem.params}\n`;
        cartItemsText += `- –¶–µ–Ω–∞: ${cartItem.priceCNY} ¬•\n`;
        cartItemsText += `- –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: ~${cartItem.priceRUB} ‚ÇΩ\n\n`;
        totalDutySum += cartItem?.dutySum ?? 0;
    });

    console.log(totalDutySum);

    makeOrderText += cartItemsText;

    totalSum = await calculateTotalSum(cart);
    makeOrderText += `–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ*: ${totalSum} ‚ÇΩ\n`;


    if (totalDutySum === 0) {
        makeOrderText += `*<i> - —Å —É—á—ë—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏</i>\n\n`;
    } else {
        makeOrderText += `*<i> - —Å —É—á—ë—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø–æ—à–ª–∏–Ω—ã</i>\n\n`;
    }

    makeOrderText += `${getEmoji("fio")}  –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${user.fio}\n`;
    makeOrderText += `${getEmoji("address")}  –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${user.address}\n`;
    makeOrderText += `${getEmoji("phone")}  –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${user.number}\n`;

    ctx.session.temp.makeOrderText = makeOrderText;

    await ctx.editMessageText(makeOrderText, {
        reply_markup: confirmOrderMenu,
        parse_mode: "HTML",
    });
    ctx.answerCallbackQuery();
});

order.callbackQuery("order__confirm", async (ctx) => {
    let cart = ctx.session.cart;
    let user = ctx.session.user;
    let { from } = ctx;

    //TODO: —É–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–∑–¥–∞–Ω–∏—è id
    const cartUniqueId = cart[0].dbId.split('').slice(-2).join('')
    const fromIdStr = from.id.toString();
    const userUniqueId = fromIdStr.split('').slice(-3).join('')

    const orderIdGeneration = `ch${userUniqueId}${cartUniqueId}`

    const order = {
        items: cart,
        user,
        totalSum,
        orderId: orderIdGeneration,
        sdekTrackNum: null,
        status: "processing",
    };
    //–ù–∞–º –Ω—É–∂–µ–Ω —ç—Ç–æ—Ç –∏–¥
    const { id: orderDbId } = await addUserOrder(ctx.from.id, order);

    let sheetDataObj = {
        id: orderIdGeneration,
        date: Date.now(),
        user: ctx.session.user.fio,
        userId: from.id,
        orderId: orderDbId,
        username: order.user.username,
        number: order.user.number,
        destination: ctx.session.user.address,
        cart: cart,
        declaredTotalPrice: ctx.session.totalSum,
    };

    await sheetUpdater(sheetDataObj);
    let res = await cleanCart(ctx.from.id);
    // if(res) {
    //
    // }
    ctx.session.cart = [];
    ctx.session.temp.order = order;

    await ctx.api.sendMessage(process.env.BOT_ORDERS_CHAT_ID, ctx.session.temp.makeOrderText, {
        message_thread_id: process.env.BOT_CHAT_TOPIC_ORDERS,
        parse_mode: "HTML",
    });

    ctx.editMessageText("üí∏ –ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", {
        reply_markup: backMainMenu,
    });
});
