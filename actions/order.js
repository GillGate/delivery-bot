import { Composer, InlineKeyboard } from "grammy";
import { conversations, createConversation } from "@grammyjs/conversations";
import { hydrate } from '@grammyjs/hydrate';
import { traceRoutes } from '../middleware/route.js';
import { registration } from "../conversations/registration.js";

export const order = new Composer();
order.use(conversations());
order.use(createConversation(registration));
order.use(hydrate());
order.use(traceRoutes);

order.callbackQuery('order_make', async ctx => {
    const orderMenu = new InlineKeyboard().text('‚ÑπÔ∏è  –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏', 'order_info').row().text('üìù  –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'order_create').row().text('‚Äπ –ù–∞–∑–∞–¥', 'back');

    await ctx.callbackQuery.message.editText('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞', {
        reply_markup: orderMenu
    });
    await ctx.answerCallbackQuery();
});

order.callbackQuery('order_check', async ctx => {
    const checkMenu = new InlineKeyboard().text('üì¶  –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', 'order_make').row().text('‚Äπ –ù–∞–∑–∞–¥', 'back');

    await ctx.callbackQuery.message.editText('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', {
        reply_markup: checkMenu
    });
    await ctx.answerCallbackQuery();
});

order.callbackQuery('order_info', async ctx => {
    const backKeyboard = new InlineKeyboard().text('‚Äπ –ù–∞–∑–∞–¥', 'back');

    await ctx.callbackQuery.message.editText('–ö–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
        reply_markup: backKeyboard
    });
    await ctx.answerCallbackQuery();
});

order.callbackQuery('order_create', async ctx => {
    const selectCategoryKeyboard = new InlineKeyboard().text('–û–±—É–≤—å', 'order__select_shoes').text('–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞', 'order__select_outerwear').row().text('‚Äπ –ù–∞–∑–∞–¥', 'back');

    await ctx.callbackQuery.message.editText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', {
        reply_markup: selectCategoryKeyboard
    });
    await ctx.answerCallbackQuery();
});

order.callbackQuery(/order__select_/, async ctx => {
    let selectSubCategoryKeyboard = new InlineKeyboard();
    let currentCategory = ctx.callbackQuery.data.split('__select_')[1];

    ctx.session.order.type = currentCategory;
    console.log("session orderType:", ctx.session.order.type);

    switch(currentCategory) {
        case 'shoes':
            selectSubCategoryKeyboard.text('–ë–æ—Ç–∏–Ω–∫–∏', 'order__pick_boots').text('–ö—Ä–æ—Å–æ–≤–∫–∏', 'order__pick_sneakers').text('–¢—É—Ñ–ª–∏', 'order__pick_slippers').row().text('‚Äπ –ù–∞–∑–∞–¥', 'back')
            break;
        case 'outerwear':
            selectSubCategoryKeyboard.text('–í–µ—Ç—Ä–æ–≤–∫–∞', 'order__pick_windbreaker').text('–ü–ª–∞—â', 'order__pick_overcoat').text('–ü–∞–ª—å—Ç–æ', 'order__pick_coat').row().text('‚Äπ –ù–∞–∑–∞–¥', 'back')
            break;
    }

    await ctx.callbackQuery.message.editText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
        reply_markup: selectSubCategoryKeyboard
    });
    await ctx.answerCallbackQuery();
});

order.callbackQuery(/order__pick_/, async ctx => {
    let currentSubCategory = ctx.callbackQuery.data.split('__pick_')[1];

    ctx.session.order.subType = currentSubCategory;
    console.log("session orderSubType:", ctx.session.order.subType);

    await ctx.callbackQuery.message.editText('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä', {
        reply_markup: new InlineKeyboard().text('‚Äπ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')
    });
    await ctx.answerCallbackQuery();

    await ctx.conversation.enter("registration");
});