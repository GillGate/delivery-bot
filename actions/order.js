import { Composer } from "grammy";
import { conversations, createConversation } from "@grammyjs/conversations";
import { hydrate } from "@grammyjs/hydrate";
import { traceRoutes } from "#bot/middleware/route.js";
import { registration } from "#bot/conversations/registration.js";
import { calculate } from "#bot/conversations/calculate.js";
import { backKeyboard, backMainMenu } from "#bot/keyboards/general.js";
import {
    checkMenu,
    confirmOrderMenu,
    getSubTypeKeyboard,
    orderMenuBeforeCreate,
    selectCategoryKeyboard,
} from "#bot/keyboards/order.js";
import { addUserOrder, cleanCart, getUserOrders, updateUserInfo } from "#bot/api/firebase.api.js";
import { translate } from "#bot/helpers/translate.js";
import limitsConfig from "#bot/config/limits.config.js";
import linksConfig from "#bot/config/links.config.js";
import sessionConfig from "#bot/config/session.config.js";
import { getEmoji } from "#bot/helpers/getEmoji.js";
import getHtmlOrderLink from "#bot/helpers/getHtmlOrderLink.js";
import { backToCart } from "#bot/keyboards/cart.js";
import calculateTotalSum from "#bot/helpers/calculateTotalSum.js";

export const order = new Composer();
order.use(hydrate());
order.use(traceRoutes);
order.use(conversations());
order.use(createConversation(registration));
order.use(createConversation(calculate));

order.callbackQuery("order__make", async (ctx) => {
    let orderText = `–ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å <a href="${linksConfig.guide}">–≥–∞–π–¥–æ–º</a> –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–∏ POIZON, –∞ —Ç–∞–∫–∂–µ —Å –ø—Ä–∞–≤–∏–ª–æ–º –Ω–∞—à–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏! üö∏`;

    await ctx.editMessageText(orderText, {
        reply_markup: orderMenuBeforeCreate,
        parse_mode: "HTML",
        link_preview_options: {
            is_disabled: true,
            prefer_small_media: true,
        },
    });
    ctx.answerCallbackQuery();
});

order.callbackQuery(/order__create/, async (ctx) => {
    let mode = ctx.callbackQuery.data.split("__create_")[1] ?? "keep";
    let cart = ctx.session.cart;

    if(cart.length === limitsConfig.cartMaxLength) {
        await ctx.editMessageText("–ö–æ—Ä–∑–∏–Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ –ª–∏—à–Ω–µ–µ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ ", {
            reply_markup: backToCart,
        });
        ctx.answerCallbackQuery();
    }
    else {
        if (mode === "skip") {
            ctx.session.user.isNewbie = false;
            if (ctx.session.user?.fio !== "") {
                updateUserInfo(ctx.from.id, {
                    isNewbie: false,
                });
            }
        }
        if (mode === "calc") {
            ctx.session.temp.calcMode = true;
        }
        if (mode === "another") {
            ctx.session.order = structuredClone(sessionConfig.order);
        }

        await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", {
            reply_markup: selectCategoryKeyboard,
        });
        ctx.answerCallbackQuery();
    }
});

order.callbackQuery(/order__select_/, async (ctx) => {
    let currentType = ctx.callbackQuery.data.split("__select_")[1];
    ctx.session.order.type = currentType;

    await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
        reply_markup: getSubTypeKeyboard(currentType),
    });
    ctx.answerCallbackQuery();
});

order.callbackQuery(/order__pick_/, async (ctx) => {
    ctx.session.order.subType = ctx.callbackQuery.data.split("__pick_")[1];
    ctx.answerCallbackQuery();

    if (ctx.session.temp?.calcMode) {
        await ctx.conversation.enter("calculate");
    } else {
        await ctx.conversation.enter("registration");
    }
});

order.callbackQuery("order__check", async (ctx) => {
    await ctx.editMessageText("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", {
        reply_markup: checkMenu,
    });
    ctx.answerCallbackQuery();
});

order.callbackQuery("order__price", async (ctx) => {
    await ctx.editMessageText("–° —á–µ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ü–µ–Ω–∞...", {
        reply_markup: backKeyboard,
    });
    ctx.answerCallbackQuery();
});

let makeOrderText = "";
let totalSum;
order.callbackQuery("order__place", async (ctx) => {
    let cart = ctx.session.cart;
    let user = ctx.session.user;

    makeOrderText += "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑:\n\n";
    let cartItemsText = "";

    cart.forEach((cartItem, index) => {
        cartItemsText += `#${++index}: ${translate(cartItem.name)}\n`;
        cartItemsText += `- –°—Å—ã–ª–∫–∞: ${getHtmlOrderLink(cartItem)}\n`;
        cartItemsText += `- –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${cartItem.params}\n`;
        cartItemsText += `- –¶–µ–Ω–∞: ${cartItem.priceRUB} ‚ÇΩ\n\n`;
    });

    makeOrderText += cartItemsText;

    totalSum = await calculateTotalSum(cart);
    makeOrderText += `–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${totalSum} ‚ÇΩ\n\n`;

    makeOrderText += `${getEmoji("fio")}  –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${user.fio}\n`;
    makeOrderText += `${getEmoji("address")}  –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${user.address}\n`;

    await ctx.editMessageText(makeOrderText, {
        reply_markup: confirmOrderMenu,
        parse_mode: "HTML",
    });
    ctx.answerCallbackQuery();
});

order.callbackQuery("order__confirm", async (ctx) => {
    let cart = ctx.session.cart;
    let user = ctx.session.user;

    

    const order = {
        items: cart,
        user,
        totalSum,
        status: "expectingPayment"
    }

    await addUserOrder(ctx.from.id, order);
    let res = await cleanCart(ctx.from.id);
    if(res) {
        ctx.session.cart = [];
        ctx.session.temp.order = order;

        if(user?.username) {
            makeOrderText += `üìû  –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: @${user.username}`;
        }

        await ctx.api.sendMessage(process.env.BOT_ORDERS_CHAT_ID, makeOrderText, {
            message_thread_id: process.env.BOT_CHAT_TOPIC_ORDERS,
            parse_mode: "HTML",
        });
    }

    ctx.editMessageText("üí∏ –ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", {
        reply_markup: backMainMenu
    })
});

/*
let maxPages;
order.callbackQuery("order__check", async (ctx) => {
    let orders = await getUserOrders(ctx.from.id);
    ctx.session.orders = orders;

    maxPages = Math.ceil(orders.length / limitsConfig.maxOrdersPerMessage);
    ctx.session.currentPage = 1;

    if (orders.length > 0) {
        let msgText = `–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:`;

        if (maxPages > 1) {
            msgText += `\n\n`;
            msgText += `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${ctx.session.currentPage} –∏–∑ ${maxPages}`;
        }

        await ctx.editMessageText(msgText, {
            reply_markup: generateOrdersMenu(orders, ctx.session.currentPage),
        });
    } else {
        await ctx.editMessageText("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", {
            reply_markup: checkMenu,
        });
    }

    ctx.answerCallbackQuery();
});

order.callbackQuery(/order__check_/, async (ctx) => {
    let currentOrderId = ctx.callbackQuery.data.split("__check_")[1];
    const order = ctx.session.orders.filter((order) => order.dbId === currentOrderId)[0];
    console.log(order);

    let orderText = `–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n`;
    orderText += `- –ò–º—è —Ç–æ–≤–∞—Ä–∞: ${translate(order.name)}\n`;
    orderText += `- –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: ${getEmoji(order.subType)}  ${translate(order.subType)}\n`;
    orderText += `- –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: ${order.price} ‚ÇΩ\n`;
    orderText += `- –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: ${order.link}\n`;
    orderText += `- –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${order.params}\n\n`;

    orderText += `${getEmoji("fio")}  –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${order.fio}\n`;
    orderText += `${getEmoji("address")}  –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.address}\n\n`;

    orderText += `–°—Ç–∞—Ç—É—Å: ${getEmoji(order.status)}  ${translate(order.status)}`;

    await ctx.editMessageText(orderText, {
        reply_markup: backKeyboard,
    });
});

order.callbackQuery(/order__nav_/, async (ctx) => {
    let direction = ctx.callbackQuery.data.split("__nav_")[1];

    if (direction === "next") {
        ctx.session.currentPage++;
    } else {
        ctx.session.currentPage = Math.max(1, --ctx.session.currentPage);
    }

    let orders = ctx.session.orders;
    let msgText = `–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n\n`;
    msgText += `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${ctx.session.currentPage} –∏–∑ ${maxPages}`;

    await ctx.editMessageText(msgText, {
        reply_markup: generateOrdersMenu(orders, ctx.session.currentPage),
    });

    ctx.answerCallbackQuery();
});
*/
